package edu.gcu.cst235.milestone.view;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

import edu.gcu.cst235.milestone.model.Customer;

// These are all the menus for the application
public class Menus {
	
	// Create a scanner for reuse across all methods
	public static Scanner scan = new Scanner(System.in);
	
	//Class data
	public static final int MENU_EXIT = 0;
	
	public static SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss");
	
	// Opening menu for the application
	/**
	 * Displays the highest level (main) menu and gets a user selection.
	 * If the user enters a non-integer, nextInt throws NumberFormatException
	 * which gets caught and calls method again
	 */
	public static int viewMainMenu(String bankName) {
		int option = 0;
		boolean invalidInput;

		try {
			do {
				invalidInput = false;
				System.out.println("\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				System.out.println("          MAIN MENU");
				System.out.println("          " + bankName);
				System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				System.out.println("\nPick an option: ");
				System.out.println("----------------------------");
				System.out.println(" 1 : Customer Management");
				System.out.println(" 2 : Customer Transactions");
				System.out.println("----------------------------");
				System.out.println(" " + MENU_EXIT + " : Exit Banking Application");
				//try to convert user input into an integer (throws InputMismatchException if not)
				option = scan.nextInt();
				
				if(option != 1 && option != 2 && option != MENU_EXIT) {
					printInputError(1, 2);
					invalidInput = true;
				}
			} while (invalidInput);
		}
		catch(Exception e) {  //generated by nextInt()
			printInputError(1, 2);
			//When a scanner throws an InputMismatchException, the scanner will not pass the token
			//that caused the exception, so that it may be retrieved or skipped via some other method.
			//So, read the token that caused the exception so it's not in the scanner anymore
			scan.nextLine();
			//Re-call the menu method
			viewMainMenu(bankName);
		}
		
		return option;
	}

	/**
	 * Displays the customer selection menu and gets a user selection.
	 * If the user enters a non-integer, nextInt throws NumberFormatException
	 * which gets caught and calls method again
	 */
	public static int viewManageCustomerMenu() {
		int option = 0;
		boolean invalidInput = false;
		try {
			do {
				invalidInput = false;
				System.out.println("\n============================");
				System.out.println("    Customer Management");
				System.out.println("============================");
				System.out.println(" 1 : Enter New Customer");
				System.out.println(" 2 : Modify Customer");
				System.out.println("-------------------------");
				System.out.println(" " + MENU_EXIT + " : Return to Main Menu");
				//try to convert user input into an integer (throws InputMismatchException if not)
				option = scan.nextInt();
				
				if(option < 0 || option > 2) {
					printInputError(1, 2);
					invalidInput = true;
				}
			} while(invalidInput);
		}
		catch(Exception e) {  //generated by nextInt()
			Menus.printInputError(1, 2);
			//When a scanner throws an InputMismatchException, the scanner will not pass the token
			//that caused the exception, so that it may be retrieved or skipped via some other method.
			//So, read the token that caused the exception so it's not in the scanner anymore
			scan.nextLine();
			//Re-call the menu method
			viewManageCustomerMenu();
		}
		
		return option;
	}
	
	/**
	 * helper method that prints an error message when the user enters and out-of-bounds number
	 * @param lower the allowable lower limit of user input
	 * @param upper the allowable upper limit of user input
	 */
	public static void printInputError(int lower, int upper) {
		System.out.println("\n** Oops, please enter a number from " + lower + " to " + upper + " or " + MENU_EXIT + " to Logout\n");		
	}

	/**
	 * helper method for getting customer names
	 * @param message
	 * @return
	 */
	public static String getName(String message) {
		System.out.println(message);		
		return scan.nextLine();
	}
	
	// CST235 TASK: REMOVE THE LIST PARAMETER
	// Picking a customer for banking transaction menu
	/**
	 * Displays the customer selection menu and gets a user selection.
	 * If the user enters a non-integer, nextInt throws NumberFormatException
	 * which gets caught and calls method again
	 */
	public static int viewCustomerSelectionMenu(List<Customer> customers) {
		int option = 0;
		boolean invalidInput = false;
		try {
			do {
				invalidInput = false;
				System.out.println("\n==============================");
				System.out.println("   Customer Login");
				System.out.println("   Select Customer:");
				System.out.println("==============================");
				for(int i = 0; i < customers.size(); i++) {
					System.out.println(
						" " + (i + 1) + " : "
						+ customers.get(i).getFirstName()
						+ " " + customers.get(i).getLastName()
					);
				}
				System.out.println("------------------------");
				System.out.println(" " + MENU_EXIT + " : Return to Main Menu");

				//Clear the newline from last nextInt call
				Menus.scan.nextLine();
				//try to convert user input into an integer (throws InputMismatchException if not)
				option = Menus.scan.nextInt();
				
				//validate user input
				if(option < 1 || option > customers.size()) {
					printInputError(1, customers.size());
					invalidInput = true;
				}
			} while(invalidInput);
		}
		catch(Exception e) {  //generated by nextInt()
			printInputError(1, customers.size());
			//When a scanner throws an InputMismatchException, the scanner will not pass the token
			//that caused the exception, so that it may be retrieved or skipped via some other method.
			//So, read the token that caused the exception so it's not in the scanner anymore
			scan.nextLine();
			//Re-call the menu method
			viewCustomerSelectionMenu(customers);
		}
		
		return option;
	}
	
	// Banking transaction menu
	/**
	 * Displays the customer action menu and gets a user selection.
	 * If the user enters a non-integer, nextInt throws NumberFormatException
	 * which gets caught and calls method again
	 */
	public static int viewCustomerActionMenu(String bankName, Customer cust) {
		int option = 0;
		boolean invalidInput = false;
		try {
			do {
				invalidInput = false;
				System.out.println("\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				System.out.println("       CUSTOMER TRANSACTION MENU");
				System.out.println("                " + bankName);
				System.out.println("        Welcome " + cust.getFirstName() + " " + cust.getLastName() + "!");
				System.out.println("          " + dateFormat.format(new Date()));
				System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				System.out.println("\nPick an option: ");
				printHeaderLine(29);
				System.out.println(" 1 : Deposit to Checking");
				System.out.println(" 2 : Deposit to Savings");
				System.out.println(" 3 : Withdraw from Checking");
				System.out.println(" 4 : Withdraw from Savings");			
				System.out.println(" 5 : Make a Loan Payment");			
				System.out.println(" 6 : View Loan amortization");			
				System.out.println(" 7 : Get Account Balances");
				System.out.println(" 8 : Get Monthly Statement");
				printHeaderLine(29);
				System.out.println(" " + MENU_EXIT + " : Return to Customer Login");
				//try to convert user input into an integer (throws InputMismatchException if not)
				option = Menus.scan.nextInt();
				
				if(option < 0 || option > 8) {
					printInputError(1, 8);
					invalidInput = true;
				}
			} while (invalidInput);
		}
		catch(Exception e) {  //generated by nextInt()
			Menus.printInputError(1, 8);
			//When a scanner throws an InputMismatchException, the scanner will not pass the token
			//that caused the exception, so that it may be retrieved or skipped via some other method.
			//So, read the token that caused the exception so it's not in the scanner anymore
			Menus.scan.nextLine();
			//Re-call the menu method
			viewCustomerActionMenu(bankName, cust);
		}
		
		return option;
	}

	/**
	 * Shows the end of month screen and performs the end-of-month calculations
	 * @param cust a Customer object for the current customer to print transactions
	 */
	public static void viewEndOfMonth(Customer cust) {

		System.out.println("\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
		System.out.println("                                 GCU BANK");
		System.out.println("                         END OF MONTH STATEMENT");
		System.out.println("                       for customer " + cust.getFirstName() + " " + cust.getLastName());
		System.out.println("                          " + Menus.dateFormat.format(new Date()));
		System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");

		//Determine if the end of the month has occurred
		//Stub-out only - NOT IMPLEMENTED IN THIS VERSION
		boolean endOfMonth = true;
		if(endOfMonth) {
			System.out.println("\nMonthly charges and credits:");
			printHeaderLine(65);
			cust.getSaving().doEndOfMonth();
			cust.getLoan().doEndOfMonth();
			
			//Display the transaction list
			System.out.println("\nDate and Time\t\tAccount\t\tAmount\t\tDescription");
			printHeaderLine(75);
			cust.getChecking().displayTransactions();
			printHeaderLine(75);
			cust.getSaving().displayTransactions();
			printHeaderLine(75);
			cust.getLoan().displayTransactions();
		}
		else {
			System.out.println("\nSorry, the <current month> is not complete.");
		}
	}

	/**
	 * Displays all account balances
	 */
	public static void viewBalances(Customer cust) {
		System.out.println(cust.toString(false));
	}
	
	/**
	 * Outputs a message to the customer when exiting the customer transaction menu
	 */
	public static void viewCustomerExit(Customer cust) {
		System.out.println("\nGoodbye " + cust.getFirstName() + ". Have a good day!\n");
	}

	/**
	 * helper method that prints a series of dashes for use as a header underline
	 * @param numDashes the number of dashes to print in a single line
	 */
	public static void printHeaderLine(int numDashes) {
		for(int i = 0; i < numDashes; i++)
			System.out.print("-");
		System.out.println();
	}

	// Get user STRING input
	public static String userStrInput(String message) {
		System.out.println(message);
		return scan.nextLine();
	}
	
	// Get user DOUBLE input	
	public static double userDblInput(String message) {	
		double amount = 0.0;
		try {
			System.out.println(message);
			String input = scan.nextLine();
			amount = Double.parseDouble(input);
		} catch (Exception e) { // Can we parse the user's entry?
			System.out.println("Wrong double input\n");
			amount = -1.0;
		}
		return amount;
	}
	
	// Balance displays for each account class type
	

	// Formatted syso method
	

	// Formatted balance printing method
	
}
